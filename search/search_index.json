{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Semester Statistics A project meant to keep an updated record of all scores achieved. This was started off as a Project to maintain all existing Scores recieved from VTU. This is a Flexible Data Project that does not require Special Functions as dictated by any college. Please note that there will be many Changes That can happen Before. Table of Contents Api Caclulations Database CsvFormat React Front End Hosting at https://semdata.rxav.pw Performance Currently, 3 full 200 Lists of Students Take up ~10seconds on a fully cold Start. Further Performance is to be tested. Additional Notes: Additional Things Needed to be implemented. Configuration File. Docx Formatter. PDF Formatter. Flexible API Syntax. Proper Structure. Documentation. <- Mostly for future Maintence. Naming Conventions Followed: CapitalCase for variables camelCase for functions CapitalCase for class Problems: USNs that change. Diploma? Arrears -- Designed, Data? Inconsistent. Missing Data? -> Data: If USN + Code In new? OldTable <= Previous Else Insert. Alternative Solutions to python docx -- Using Mail Merge.","title":"Semester Statistics"},{"location":"#semester-statistics","text":"A project meant to keep an updated record of all scores achieved. This was started off as a Project to maintain all existing Scores recieved from VTU. This is a Flexible Data Project that does not require Special Functions as dictated by any college. Please note that there will be many Changes That can happen Before.","title":"Semester Statistics"},{"location":"#table-of-contents","text":"Api Caclulations Database CsvFormat","title":"Table of Contents"},{"location":"#react-front-end","text":"Hosting at https://semdata.rxav.pw","title":"React Front End"},{"location":"#performance","text":"Currently, 3 full 200 Lists of Students Take up ~10seconds on a fully cold Start. Further Performance is to be tested.","title":"Performance"},{"location":"#additional-notes","text":"Additional Things Needed to be implemented. Configuration File. Docx Formatter. PDF Formatter. Flexible API Syntax. Proper Structure. Documentation. <- Mostly for future Maintence.","title":"Additional Notes:"},{"location":"#naming-conventions-followed","text":"CapitalCase for variables camelCase for functions CapitalCase for class","title":"Naming Conventions Followed:"},{"location":"#problems","text":"USNs that change. Diploma? Arrears -- Designed, Data? Inconsistent. Missing Data? -> Data: If USN + Code In new? OldTable <= Previous Else Insert.","title":"Problems:"},{"location":"#alternative-solutions-to-python-docx","text":"-- Using Mail Merge.","title":"Alternative Solutions to python docx"},{"location":"Algorithm/","text":"Algorithms Defined here are the algorithms that are used to insert records into the database, the idea of how the parser works and ways to improve on it. Inserting Score Records into the database Filtering Which Records to be Inserted into the Database. Proposals: - Replace the <Year, YearIndicator> with <Semester> for better Management. Inserting: ToInsertInput = [**data] for Insert in ToInsertInput: Insert If No Conflict If Conflict Do Update on Record if Record.SemesterWritten < Insert.SemesterWritten Triggers: Before Update into SubjectScore: Insert Into HistoricalSubjectScore SubjectScore.CurrentData All Other Records: Inserting: ToInsertInput = [**data] for Insert in ToInsertInput: Insert If No Conflict If Conflict: Do Ignore.","title":"Algorithms"},{"location":"Algorithm/#algorithms","text":"Defined here are the algorithms that are used to insert records into the database, the idea of how the parser works and ways to improve on it.","title":"Algorithms"},{"location":"Algorithm/#inserting-score-records-into-the-database","text":"Filtering Which Records to be Inserted into the Database. Proposals: - Replace the <Year, YearIndicator> with <Semester> for better Management. Inserting: ToInsertInput = [**data] for Insert in ToInsertInput: Insert If No Conflict If Conflict Do Update on Record if Record.SemesterWritten < Insert.SemesterWritten Triggers: Before Update into SubjectScore: Insert Into HistoricalSubjectScore SubjectScore.CurrentData","title":"Inserting Score Records into the database"},{"location":"Algorithm/#all-other-records","text":"Inserting: ToInsertInput = [**data] for Insert in ToInsertInput: Insert If No Conflict If Conflict: Do Ignore.","title":"All Other Records:"},{"location":"Calculations/","text":"Calculations Note that Per-Scheme-Wise-Plguin (Is detailed in External Calculations is used to allow for differences in changes over the Years By VTU for final Output. Must be Specified On the filename. Scheme = Given. This must always be specified since the scheme can vary Even in the same Batch. Semester = Given. While the Application can determine Which Semester for Storage, this is enforced due to Naming Constraints. Batch = Given. Specified Within the filename. Calculations Done To Be Placed into the Database. Year = Batch Year + Floor(Semester/2) OddEven = Semester%2 (If Even, then 0, if Odd, then 1) DepartmentCode = Taken From Subject (17CS12) DepartmentName = Hard Coded External Caclulations This Section Maintains the Various Calculations Needed for Other Statistics. Scheme - 18 To be added Scheme - 17 FCD = 70% or Greater. FC = 60% to 70% SC = 45% to 60% Pass Criteria => Total Must be 45+ AND External must be 21 Scheme - 15 To be added","title":"Calculations"},{"location":"Calculations/#calculations","text":"Note that Per-Scheme-Wise-Plguin (Is detailed in External Calculations is used to allow for differences in changes over the Years By VTU for final Output.","title":"Calculations"},{"location":"Calculations/#must-be-specified-on-the-filename","text":"Scheme = Given. This must always be specified since the scheme can vary Even in the same Batch. Semester = Given. While the Application can determine Which Semester for Storage, this is enforced due to Naming Constraints. Batch = Given. Specified Within the filename.","title":"Must be Specified On the filename."},{"location":"Calculations/#calculations-done-to-be-placed-into-the-database","text":"Year = Batch Year + Floor(Semester/2) OddEven = Semester%2 (If Even, then 0, if Odd, then 1) DepartmentCode = Taken From Subject (17CS12) DepartmentName = Hard Coded","title":"Calculations Done To Be Placed into the Database."},{"location":"Calculations/#external-caclulations","text":"This Section Maintains the Various Calculations Needed for Other Statistics.","title":"External Caclulations"},{"location":"Calculations/#scheme-18","text":"To be added","title":"Scheme - 18"},{"location":"Calculations/#scheme-17","text":"FCD = 70% or Greater. FC = 60% to 70% SC = 45% to 60% Pass Criteria => Total Must be 45+ AND External must be 21","title":"Scheme - 17"},{"location":"Calculations/#scheme-15","text":"To be added","title":"Scheme - 15"},{"location":"CsvFormat/","text":"CSV Format USN, Name, Attempted Subjects, [SubCode, Subname,Internals,Externals,Total,Fail/Pass]xAttemptedSubjects File Naming: The Files Should be Named in this Order: Data-(Branch)-(Batch)-(Scheme)-(Semester)[-Reval].csv An Example: For the Batch That has the SerialNumber 1CR16XX001 (Some Number), Attempting their 6th Semester, The filename Must be: Ensure that this is followed or the application will fail to parse properly. Data-CSE-2016-2015-6.csv If Reval Results then: Data-CSE-2016-2015-6-Reval.csv Any File not in this format will be ignored .","title":"CSV Format"},{"location":"CsvFormat/#csv-format","text":"USN, Name, Attempted Subjects, [SubCode, Subname,Internals,Externals,Total,Fail/Pass]xAttemptedSubjects","title":"CSV Format"},{"location":"CsvFormat/#file-naming","text":"The Files Should be Named in this Order: Data-(Branch)-(Batch)-(Scheme)-(Semester)[-Reval].csv An Example: For the Batch That has the SerialNumber 1CR16XX001 (Some Number), Attempting their 6th Semester, The filename Must be: Ensure that this is followed or the application will fail to parse properly. Data-CSE-2016-2015-6.csv If Reval Results then: Data-CSE-2016-2015-6-Reval.csv Any File not in this format will be ignored .","title":"File Naming:"},{"location":"Database/","text":"Database structure Department Details Property Description Type PK/FK? Indexed DepartmentCode Code for the Department VARCHAR(2) PK No DepartmentName The Name of the Department TEXT - No Student Details Property Description Type PK/FK? Indexed SerialNumber University Serial Number VARCHAR(10) PK Yes Name Name of the Student TEXT - No Batch The Batch They Belong to in YYYY Format INTEGER(4) - No Department The Code of the Department VARCHAR(2) FK -> Department No BatchSchemeInfo Property Description Type PK/FK? Indexed Batch Batch Detail YYYY INT PK, CK No Scheme Scheme Number YYYY INT - No Subject Details Property Description Type PK/FK? Indexed SubjectCode Code of the Subject in Official VTU VARCHAR(7) PK Yes SubjectName Name of the Subject TEXT - No SubjectSemester Semester the Subject Appears in INTEGER - No SubjectDepartment Department that the subject Belings to VARCHAR(2) FK -> Department No Subject Score Property Description Type PK/FK? Indexed SerialNumber USN of the Student VARCHAR(10) PK, FK -> Student Details Yes SubjectCode Subject Code. VARCHAR(7) Pk, FK -> Subject Details Yes Year Year the Subject was Written In INTEGER - No Year Odd/Even BOOL - No Internals Internal Marks INTEGER - No Externals External Marks INTEGER - No HistoricalSubject Score Property Description Type PK/FK? Indexed SerialNumber USN of the Student VARCHAR(10) FK -> Student Details No SubjectCode Subject Code VARCHAR(7) FK -> Subject Details No Year Year the Subject was Written In INTEGER - No Year Odd/Even BOOL - No Internals Internal Marks INTEGER - No Externals External Marks INTEGER - No TeacherDetails Property Description Type PK/FK? Indexed TeacherId An ID for the given teacher INT PK No TeacherName The Name of the Given teacher TEXT - No TeacherBatchDetails Property Description Type PK/FK? Indexed TeacherId an ID for the given teacher. INT FK -> TeacherDetails Yes Batch YYYY Batch INT PK,FK -> BatchDetails No Subject Code YYYY Batch VARCHAR(7) -- No ParsedTable Property Description Type PK/FK? Indexed Department The Department Code VARCHAR(3) FK -> DepartmentDetails No Batch The Batch Parsed INT FK -> BatchSchemeDetails No Semester The Semester Parsed INT - No Arrear If Reval Result Bool - No","title":"Database structure"},{"location":"Database/#database-structure","text":"","title":"Database structure"},{"location":"Database/#department-details","text":"Property Description Type PK/FK? Indexed DepartmentCode Code for the Department VARCHAR(2) PK No DepartmentName The Name of the Department TEXT - No","title":"Department Details"},{"location":"Database/#student-details","text":"Property Description Type PK/FK? Indexed SerialNumber University Serial Number VARCHAR(10) PK Yes Name Name of the Student TEXT - No Batch The Batch They Belong to in YYYY Format INTEGER(4) - No Department The Code of the Department VARCHAR(2) FK -> Department No","title":"Student Details"},{"location":"Database/#batchschemeinfo","text":"Property Description Type PK/FK? Indexed Batch Batch Detail YYYY INT PK, CK No Scheme Scheme Number YYYY INT - No","title":"BatchSchemeInfo"},{"location":"Database/#subject-details","text":"Property Description Type PK/FK? Indexed SubjectCode Code of the Subject in Official VTU VARCHAR(7) PK Yes SubjectName Name of the Subject TEXT - No SubjectSemester Semester the Subject Appears in INTEGER - No SubjectDepartment Department that the subject Belings to VARCHAR(2) FK -> Department No","title":"Subject Details"},{"location":"Database/#subject-score","text":"Property Description Type PK/FK? Indexed SerialNumber USN of the Student VARCHAR(10) PK, FK -> Student Details Yes SubjectCode Subject Code. VARCHAR(7) Pk, FK -> Subject Details Yes Year Year the Subject was Written In INTEGER - No Year Odd/Even BOOL - No Internals Internal Marks INTEGER - No Externals External Marks INTEGER - No","title":"Subject Score"},{"location":"Database/#historicalsubject-score","text":"Property Description Type PK/FK? Indexed SerialNumber USN of the Student VARCHAR(10) FK -> Student Details No SubjectCode Subject Code VARCHAR(7) FK -> Subject Details No Year Year the Subject was Written In INTEGER - No Year Odd/Even BOOL - No Internals Internal Marks INTEGER - No Externals External Marks INTEGER - No","title":"HistoricalSubject Score"},{"location":"Database/#teacherdetails","text":"Property Description Type PK/FK? Indexed TeacherId An ID for the given teacher INT PK No TeacherName The Name of the Given teacher TEXT - No","title":"TeacherDetails"},{"location":"Database/#teacherbatchdetails","text":"Property Description Type PK/FK? Indexed TeacherId an ID for the given teacher. INT FK -> TeacherDetails Yes Batch YYYY Batch INT PK,FK -> BatchDetails No Subject Code YYYY Batch VARCHAR(7) -- No","title":"TeacherBatchDetails"},{"location":"Database/#parsedtable","text":"Property Description Type PK/FK? Indexed Department The Department Code VARCHAR(3) FK -> DepartmentDetails No Batch The Batch Parsed INT FK -> BatchSchemeDetails No Semester The Semester Parsed INT - No Arrear If Reval Result Bool - No","title":"ParsedTable"},{"location":"api/","text":"API Routes /student /student/list /student/ [POST] /student/list/ Retrieves the student list from the database given the following POST request scheme An Example POST Request: { \"Department\":\"CS\", //string \"Batch\":2016, //Integer \"Semester\":6, //Integer } An Example Response (If given to the above.) Will be: [{ \"Name\":\"SomeName\", \"USN\":\"1CX16CS017\", \"Section\":\"\", //Currently Unavailable. \"Marks\":[ //An Array of Marks, Per Code. { \"Code\":\"15CS61\", \"Internal\":18, //Integer \"External\":56, //Integer \"Total\":64, //Integer \"Result\":\"Pass\", \"Class\":\"FCD\", }, //Similar Objects as above. ], \"Overall\":{ \"Total\":560, \"Result\":\"Pass\", } //Only One Object. } // More Objects Like the one Above, Based on your request. ]","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#routes","text":"/student /student/list /student/","title":"Routes"},{"location":"api/#post-studentlist","text":"Retrieves the student list from the database given the following POST request scheme An Example POST Request: { \"Department\":\"CS\", //string \"Batch\":2016, //Integer \"Semester\":6, //Integer } An Example Response (If given to the above.) Will be: [{ \"Name\":\"SomeName\", \"USN\":\"1CX16CS017\", \"Section\":\"\", //Currently Unavailable. \"Marks\":[ //An Array of Marks, Per Code. { \"Code\":\"15CS61\", \"Internal\":18, //Integer \"External\":56, //Integer \"Total\":64, //Integer \"Result\":\"Pass\", \"Class\":\"FCD\", }, //Similar Objects as above. ], \"Overall\":{ \"Total\":560, \"Result\":\"Pass\", } //Only One Object. } // More Objects Like the one Above, Based on your request. ]","title":"[POST] /student/list/"}]}